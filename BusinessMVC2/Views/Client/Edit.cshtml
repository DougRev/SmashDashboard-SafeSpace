@model BusinessModels.BusinessEdit
@using BusinessMVC2.Models
@{
    ViewBag.Title = "Edit";
}
<style>
    .map-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .map-wrapper {
        width: 100%;
        max-width: 800px;
        height: 400px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 4px;
        overflow: hidden;
    }

    #map {
        width: 100%;
        height: 100%;
    }
</style>
<h2>Edit Client Info</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4></h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.HiddenFor(model => model.BusinessId, htmlAttributes: new { @class = "control-label col-md-4" })

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.FranchiseId, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(model => model.FranchiseId, Model.Franchises, "Select a Franchise", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.FranchiseId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(model => model.AccountId, new SelectList(ViewBag.NationalAccounts, "Value", "Text"), "Select an Account", new { @class = "form-control" })

            @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BusinessName, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.BusinessName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BusinessName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FacilityID, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.FacilityID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FacilityID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EnumDropDownListFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
        </div>
    </div>


        <div class="form-group">
        <div class="col-md-offset-4 col-md-8">
            <button type="button" id="searchLandfillsButton" class="btn btn-default">Search Landfills</button>
        </div>
    </div>

    <div class="map-container">
        <div class="map-wrapper">
            <div id="map"></div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label class="control-label col-md-4">Landfills</label>
        <div class="col-md-8">
            <div id="landfillList" style="width: 100%; max-height: 200px; overflow-y: scroll;"></div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.Compactibility, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EnumDropDownListFor(model => model.Compactibility, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Compactibility, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.HaulsPerDay, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.HaulsPerDay, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HaulsPerDay, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.NumberOfDumpsters, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.NumberOfDumpsters, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NumberOfDumpsters, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LandfillDist, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(model => model.LandfillDist, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LandfillDist, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.HiddenFor(model => model.OwnerId, htmlAttributes: new { @class = "control-label col-md-4" })

    </div>

    <div class="form-group">
        <div class="col-md-offset-4 col-md-8">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    var map;
    var geocoder;
    var userLocation;
    var service;
    var markers = [];

    document.getElementById('searchLandfillsButton').addEventListener('click', updateMapAndLandfills);


    function initMap() {
        geocoder = new google.maps.Geocoder();
        var center = { lat: 37.7749, lng: -122.4194 }; // Default center (San Francisco)
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: center
        });

        service = new google.maps.places.PlacesService(map);

        // Example user address
        var address = getAddress();


        geocodeAddress(userAddress, function (location) {
            userLocation = location;
            map.setCenter(userLocation);

            searchNearbyLandfills(userLocation);
        });
    }
    function getAddress() {
        var address = document.querySelector('input[name="Address"]').value;
        var city = document.querySelector('input[name="City"]').value;
        var state = document.querySelector('select[name="State"] option:checked').text;
        var zipCode = document.querySelector('input[name="ZipCode"]').value;
        return address + ', ' + city + ', ' + state + ', ' + zipCode;
    }



    function updateMapAndLandfills() {
        var address = getAddress();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK') {
                userLocation = results[0].geometry.location;
                map.setCenter(userLocation);
                searchNearbyLandfills(userLocation);
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
        console.log(address);
    }




    function geocodeAddress(geocoder, resultsMap) {
        var address = getAddress();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });
                findNearbyLandfills(resultsMap, results[0].geometry.location);
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    function searchNearbyLandfills(location) {
        var request = {
            location: location,
            radius: '50000', // Search within 50 km radius
            keyword: 'landfill'
        };

        service.nearbySearch(request, function (results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                console.log('Search results:', results); // Log search results
                results.forEach(function (landfill) {
                    addLandfillMarker(landfill);
                });

                // Create a list of nearby landfills
                createLandfillList(results);

            } else {
                alert('Places search was not successful for the following reason: ' + status);
            }
        });
    }



    function addLandfillMarker(landfill) {
        var marker = new google.maps.Marker({
            position: landfill.geometry.location,
            map: map,
            title: landfill.name
        });

        markers.push(marker); // Add the marker to the markers array

        var infowindow = new google.maps.InfoWindow({
            content: '<div><strong>' + landfill.name + '</strong><br>' + landfill.vicinity + '</div>'
        });

        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });
    }


    function searchByAddress() {
        var addressInput = document.getElementById('addressInput');
        var address = addressInput.value;

        if (address) {
            geocodeAddress(address, function (location) {
                userLocation = location;
                map.setCenter(userLocation);

                // Remove existing markers
                if (markers.length > 0) {
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];
                }

                searchNearbyLandfills(userLocation);
            });
        } else {
            alert('Please enter an address.');
        }
    }

    function createLandfillList(landfills) {
        var list = document.getElementById('landfillList');
        list.innerHTML = '';

        landfills.forEach(function (landfill, index) {
            var listItem = document.createElement('div');
            listItem.innerHTML = '<input type="radio" name="landfill" id="landfill' + index + '" value="' + index + '"><label for="landfill' + index + '">' + landfill.name + ' (' + landfill.vicinity + ')</label>';
            list.appendChild(listItem);

            // Add event listener to each radio button
            listItem.querySelector('input').addEventListener('change', calculateDistance);
        });
    }

    function calculateDistance() {
        var selectedLandfillIndex = -1;
        var landfillRadios = document.getElementsByName('landfill');

        for (var i = 0; i < landfillRadios.length; i++) {
            if (landfillRadios[i].checked) {
                selectedLandfillIndex = parseInt(landfillRadios[i].value);
                break;
            }
        }

        if (selectedLandfillIndex >= 0 && selectedLandfillIndex < markers.length) {
            var selectedMarker = markers[selectedLandfillIndex];
            var directionsService = new google.maps.DirectionsService();

            var request = {
                origin: userLocation,
                destination: selectedMarker.getPosition(),
                travelMode: google.maps.TravelMode.DRIVING
            };

            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    var route = response.routes[0];
                    var distance = route.legs[0].distance;
                    document.getElementById('@Html.IdFor(model => model.LandfillDist)').value = parseFloat(distance.text);
                } else {
                    alert('Directions request failed due to ' + status);
                }
            });
        } else {
            alert('Please select a landfill from the list.');
        }
    }

</script>
