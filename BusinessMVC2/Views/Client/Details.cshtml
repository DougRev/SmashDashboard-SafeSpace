@model BusinessModels.BusinessDetails
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNet.Identity;



@{
    ViewBag.Title = "Details";
}

<h2>@Model.BusinessName</h2>

<div id="details-container">

    <div id="client-details">
        <h4></h4>
        <hr />
        <dl id="client-inputs">
            <h4 id="input-header">Client Inputs</h4>
            <dt>
                @Html.DisplayNameFor(model => model.BusinessId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.BusinessId)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.BusinessName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.BusinessName)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Address)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Address)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.City)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.City)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.State)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.State)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.ZipCode)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ZipCode)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.FranchiseName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.FranchiseName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AccountName)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.AccountName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Compactibility)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Compactibility)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.NumberOfDumpsters)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.NumberOfDumpsters)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.HaulsPerDay)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.HaulsPerDay)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.PreSMTYearlyHauls)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PreSMTYearlyHauls)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.LandfillDist)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.LandfillDist)
            </dd>
        </dl>
    </div>
    <div id="client-emissions">
        <h4 id="emissions-header"></h4>
        <hr />


        <table id="emissions">
            <thead>
                <tr>
                    <th>Emission Type</th>
                    <th>Value (lbs)</th>
                </tr>
            </thead>
            <tbody id="emissionsBody">
                @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("NOX")))
                {
                    var displayName = prop.Name;
                    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
                    if (displayAttributes.Length > 0)
                    {
                        var displayAttribute = displayAttributes[0] as DisplayAttribute;
                        displayName = displayAttribute.Name;
                    }
                    <tr>
                        <td>@displayName</td>
                        <td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td>
                    </tr>
                }

            </tbody>
        </table>
        <button id="NOXEmissions" class="emissions-btn">NOX</button>
        <button id="N20Emissions" class="emissions-btn">N20</button>
        <button id="PM25Emissions" class="emissions-btn">PM25</button>
        <button id="PM10Emissions" class="emissions-btn">PM10</button>
        <button id="SO2Emissions" class="emissions-btn">SO2</button>
        <button id="CH4Emissions" class="emissions-btn">CH4</button>
        <button id="COEmissions" class="emissions-btn">CO</button>
        <button id="VOCEmissions" class="emissions-btn">VOC</button>
        <button id="CO2Emissions" class="emissions-btn">CO2</button>

        <table id="emissions">
            <thead>
                <tr>
                    <th>Baseline Totals</th>
                    <th>Emissions With Smash Totals</th>
                    <th>Savings Totals</th>
                </tr>
            </thead>
            <tbody id="emissionsBody">
                <tr>
                    <td>@Model.AllEmissionsBaselineTotalsV2.ToString("N2")</td>
                    <td>@Model.AllEmissionsWithSmashTotalsV2.ToString("N2")</td>
                    <td>@Model.AllSavingsTotalV2</td>
                </tr>
            </tbody>
        </table>
    </div>

</div>
@using (Html.BeginForm("SubmitAction", "Client", new { id = Model.BusinessId }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="TxtUrl"></label>
        <input type="hidden" name="TxtUrl" id="TxtUrl" class="form-control" value="https://businessmvc220230407125015.azurewebsites.net/Client/BusinessDetailsToPdf/@Model.BusinessId" required />
    </div>

    <input type="hidden" name="DdlPageSize" value="Letter" />
    <input type="hidden" name="DdlPageOrientation" value="Landscape" />
    <input type="hidden" name="TxtWidth" value="1024" />
    <input type="hidden" name="TxtHeight" value="0" />
    <input type="hidden" name="BusinessId" value="@Model.BusinessId" />
    @Html.Hidden("UserId", User.Identity.GetUserId())

    <button type="submit" class="btn btn-primary">
        Generate PDF
    </button>
}


<br />

<h3>Invoices</h3>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Invoice Id</th>
            <th>Account Type</th>
            <th>Total Cost</th>
            <th>Status</th>
            <th>SMT Contact</th>
            <th>Account Contact</th>
            <th>Contact Email</th>
            <th>Contact Phone</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var invoice in Model.Invoices)
        {
            <tr>
                <td>@invoice.InvoiceId</td>
                <td>@invoice.AccountType</td>
                <td>@String.Format("{0:C}", invoice.TotalCost)</td>
                <td>@invoice.Status</td>
                <td>@invoice.SmtContact</td>
                <td>@invoice.AccountContact</td>
                <td>@invoice.ContactEmail</td>
                <td>@(string.IsNullOrEmpty(invoice.ContactPhone) ? "N/A" : String.Format("{0:(###) ###-####}", double.Parse(invoice.ContactPhone)))</td>
                
            </tr>
        }
    </tbody>
</table>


<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.BusinessId }, null) |
    @Html.ActionLink("Back to List", "Index")
</p>
<script>
    var noxButton = document.getElementById("NOXEmissions");
    var n20Button = document.getElementById("N20Emissions");
    var pm25Button = document.getElementById("PM25Emissions");
    var pm10Button = document.getElementById("PM10Emissions");
    var so2Button = document.getElementById("SO2Emissions");
    var ch4Button = document.getElementById("CH4Emissions");
    var coButton = document.getElementById("COEmissions");
    var vocButton = document.getElementById("VOCEmissions");
    var co2Button = document.getElementById("CO2Emissions");

    var emissionsBody = document.getElementById("emissionsBody");
    var emissionsData = "NOX";

    function changeNOX() {
    emissionsBody.innerHTML = "";
    @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("NOX")))
    {
        var displayName = prop.Name;
        var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
        if (displayAttributes.Length > 0)
        {
            var displayAttribute = displayAttributes[0] as DisplayAttribute;
            displayName = displayAttribute.Name;
        }
        <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
    }
}


    function changeN20() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("N20")))
        {
            var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changePM25() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("PM25")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changePM10() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("PM10")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changeSO2() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("SO2")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changeCH4() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("CH4")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changeCO() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("CO") && !p.Name.Contains("2")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changeVOC() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("VOC")))
        {
            var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
   <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }
    function changeCO2() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("CO2")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
    <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    function changeCO2EQ() {
        emissionsBody.innerHTML = "";
        @foreach (var prop in Model.GetType().GetProperties().Where(p => p.Name.Contains("CO2EQ")))
        {
           var displayName = prop.Name;
    var displayAttributes = prop.GetCustomAttributes(typeof(DisplayAttribute), false);
    if (displayAttributes.Length > 0)
    {
        var displayAttribute = displayAttributes[0] as DisplayAttribute;
        displayName = displayAttribute.Name;
    }
   <text>
        emissionsBody.innerHTML += '<tr><td>@displayName</td><td>@string.Format("{0:N2}", prop.GetValue(Model, null))</td></tr>';
        </text>
        }
    }

    noxButton.addEventListener("click", function () {
        emissionsData = emissionsData === "NOX" ? "N20" : "NOX";
        changeNOX();
    });

    n20Button.addEventListener("click", function () {
        emissionsData = emissionsData === "N20" ? "PM25" : "N20";
        changeN20();
    });

    pm25Button.addEventListener("click", function () {
        emissionsData = emissionsData === "PM25" ? "PM10" : "PM25";
        changePM25();
    });

    pm10Button.addEventListener("click", function () {
        emissionsData = emissionsData === "PM10" ? "SO2" : "PM10";
        changePM10();
    });

    so2Button.addEventListener("click", function () {
        emissionsData = emissionsData === "SO2" ? "CH4" : "SO2";
        changeSO2();
    });

    ch4Button.addEventListener("click", function () {
        emissionsData = emissionsData === "CH4" ? "CO" : "CH4";
        changeCH4();
    });

    coButton.addEventListener("click", function () {
        emissionsData = emissionsData === "CO" ? "VOC" : "CO";
        changeCO();
    });

    vocButton.addEventListener("click", function () {
        emissionsData = emissionsData === "VOC" ? "CO2" : "VOC";
        changeVOC();
    });

    co2Button.addEventListener("click", function () {
        emissionsData = emissionsData === "CO2" ? "NOX" : "CO2";
        changeCO2();
    });


</script>